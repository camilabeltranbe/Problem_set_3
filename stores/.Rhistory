localidad_ENGATIVA + localidad_LOS.MARTIRES + localidad_SAN.CRISTOBAL + localidad_SANTA.FE +
localidad_SUBA + localidad_TEUSAQUILLO + localidad_USAQUEN + surface_covered3^2 + rooms3^2 +
surface_total3^2 + property_type_Apartamento + property_type_Casa,
data=train_full_dummys[-1], #excluye variable de property_id
method = "xgbTree",
trControl = fitControl,
tuneGrid=grid_xbgoost)
train_XGBoost_model8 <- train_full_dummys %>%
mutate(price_pred = predict(XGBoost_model8, newdata = train_full_dummys))
yardstick::mae(train_XGBoost_model8, truth = price, estimate = price_pred) #predicción en train: mae = 115797313
Predic_XGBoost_model8 <- test_full_dummys %>%
mutate(price = predict(XGBoost_model8, newdata = test_full_dummys)) %>%
select(property_id,price)
write.csv(Predic_XGBoost_model8,"XGBoost_model8_ale.csv",row.names = F)
View(train)
#- 5 | Modelos de regresión lineal ---------------------------------------------------
reg_lin_model1 <- lm(price ~ rooms3 + bathrooms3 + surface_total3 +
surface_covered3 + n_pisos_numerico + zona_t_g + estrato +
PC1 + PC2 + PC3 + PC4 + PC5 + PC6 +
PC7 + PC8 + PC9 + PC10 + PC11 + PC12 + PC13 + PC14 + PC15 +
PC16 + PC17 + PC18 + PC19 + PC20 + PC21 + PC22 + PC23 + PC24 +
PC25 + PC26 + PC27 + PC28 + PC29 + PC30 + PC31 + PC32 + PC33 +
PC34 + PC35 + PC36 + PC37 + PC38 + PC39 + PC40 + PC41 + PC42 +
PC43 + PC44 + PC45 + PC46 + PC47 + PC48 + PC49 + PC50 + PC51 +
PC52 + PC53 + PC54 + PC55 + PC56 + PC57 + PC58 + PC59 + PC60 +
PC61 + PC62 + PC63 + PC64 + PC65 + PC66 + PC67 + PC68 + PC69 +
PC70 + PC71 + abiert + acab + acces + alcob + ampli + are +
ascensor + balcon + ban + bao + baos + bbq + bogot + buen +
centr + cerc + cerr + chimene + closet + cocin + comedor +
comercial + comunal + cuart + cuatr + cubiert + cuent + deposit +
dos + edifici + espaci + estudi + excelent + exterior + garaj +
gas + gimnasi + habit + habitacion + hermos + ilumin + independient +
integral + interior + lavanderi + lind + mader + mts + natural +
parqu + parqueader + pis + principal + priv + remodel + rop +
sal + salon + sector + segur + servici + social + terraz +
tres + ubicacion + uno + vias + vigil + visit + vist + zon +
localidad_BARRIOS.UNIDOS + localidad_CANDELARIA + localidad_CHAPINERO +
localidad_ENGATIVA + localidad_LOS.MARTIRES + localidad_SAN.CRISTOBAL + localidad_SANTA.FE +
localidad_SUBA + localidad_TEUSAQUILLO + localidad_USAQUEN + surface_covered3^2 + rooms3^2 +
surface_total3^2 + property_type_Apartamento + property_type_Casa,
data=train_full_dummys)
train_full_dummys$price_pred <- predict(reg_lin_model1,newdata = train_full_dummys)
test_full_dummys$price <- predict(reg_lin_model1,newdata = test_full_dummys)
mae(data = train_full_dummys,truth = price, estimate = price_pred) #predicción en train: mae = 164128735
yardstick::mae(data = train_full_dummys,truth = price, estimate = price_pred) #predicción en train: mae = 164128735
Predic_lin_reg_model1 <- test_full_dummys[,c("property_id","y_pred")]
Predic_lin_reg_model1 <- test_full_dummys[,c("property_id","price_pred")]
Predic_lin_reg_model1 <- test_full_dummys[,c("property_id","price")]
colnames(Predic_lin_reg_model1) <- c("property_id","price")
write.csv(Predic_lin_reg_model1,"Linear_reg_model1_ale.csv",row.names = F)
#precio normal con mas variables
full_formula3<- as.formula(price ~ rooms3 + bathrooms3 + surface_total3 +
surface_covered3 + n_pisos_numerico + zona_t_g + estrato +
PC1 + PC2 + PC3 + PC4 + PC5 + PC6 +
PC7 + PC8 + PC9 + PC10 + PC11 + PC12 + PC13 + PC14 + PC15 +
PC16 + PC17 + PC18 + PC19 + PC20 + PC21 + PC22 + PC23 + PC24 +
PC25 + PC26 + PC27 + PC28 + PC29 + PC30 + PC31 + PC32 + PC33 +
PC34 + PC35 + PC36 + PC37 + PC38 + PC39 + PC40 + PC41 + PC42 +
PC43 + PC44 + PC45 + PC46 + PC47 + PC48 + PC49 + PC50 + PC51 +
PC52 + PC53 + PC54 + PC55 + PC56 + PC57 + PC58 + PC59 + PC60 +
PC61 + PC62 + PC63 + PC64 + PC65 + PC66 + PC67 + PC68 + PC69 +
PC70 + PC71 + abiert + acab + acces + alcob + ampli + are +
ascensor + balcon + ban + bao + baos + bbq + bogot + buen +
centr + cerc + cerr + chimene + closet + cocin + comedor +
comercial + comunal + cuart + cuatr + cubiert + cuent + deposit +
dos + edifici + espaci + estudi + excelent + exterior + garaj +
gas + gimnasi + habit + habitacion + hermos + ilumin + independient +
integral + interior + lavanderi + lind + mader + mts + natural +
parqu + parqueader + pis + principal + priv + remodel + rop +
sal + salon + sector + segur + servici + social + terraz +
tres + ubicacion + uno + vias + vigil + visit + vist + zon +
localidad_BARRIOS.UNIDOS + localidad_CANDELARIA + localidad_CHAPINERO +
localidad_ENGATIVA + localidad_LOS.MARTIRES + localidad_SAN.CRISTOBAL + localidad_SANTA.FE +
localidad_SUBA + localidad_TEUSAQUILLO + localidad_USAQUEN + surface_covered3^2 + rooms3^2 +
surface_total3^2 + property_type_Apartamento + property_type_Casa)
full_formula3
#precio normal con mas variables
full_formula3<- as.formula(price ~ rooms3 + bathrooms3 + surface_total3 +
surface_covered3 + n_pisos_numerico + zona_t_g + estrato +
PC1 + PC2 + PC3 + PC4 + PC5 + PC6 +
PC7 + PC8 + PC9 + PC10 + PC11 + PC12 + PC13 + PC14 + PC15 +
PC16 + PC17 + PC18 + PC19 + PC20 + PC21 + PC22 + PC23 + PC24 +
PC25 + PC26 + PC27 + PC28 + PC29 + PC30 + PC31 + PC32 + PC33 +
PC34 + PC35 + PC36 + PC37 + PC38 + PC39 + PC40 + PC41 + PC42 +
PC43 + PC44 + PC45 + PC46 + PC47 + PC48 + PC49 + PC50 + PC51 +
PC52 + PC53 + PC54 + PC55 + PC56 + PC57 + PC58 + PC59 + PC60 +
PC61 + PC62 + PC63 + PC64 + PC65 + PC66 + PC67 + PC68 + PC69 +
PC70 + PC71 + abiert + acab + acces + alcob + ampli + are +
ascensor + balcon + ban + bao + baos + bbq + bogot + buen +
centr + cerc + cerr + chimene + closet + cocin + comedor +
comercial + comunal + cuart + cuatr + cubiert + cuent + deposit +
dos + edifici + espaci + estudi + excelent + exterior + garaj +
gas + gimnasi + habit + habitacion + hermos + ilumin + independient +
integral + interior + lavanderi + lind + mader + mts + natural +
parqu + parqueader + pis + principal + priv + remodel + rop +
sal + salon + sector + segur + servici + social + terraz +
tres + ubicacion + uno + vias + vigil + visit + vist + zon +
localidad_BARRIOS.UNIDOS + localidad_CANDELARIA + localidad_CHAPINERO +
localidad_ENGATIVA + localidad_LOS.MARTIRES + localidad_SAN.CRISTOBAL + localidad_SANTA.FE +
localidad_SUBA + localidad_TEUSAQUILLO + localidad_USAQUEN + surface_covered3^2 + rooms3^2 +
surface_total3^2 + property_type_Apartamento + property_type_Casa)
# Especificación del Modelo de Random Forest con el modo establecido
rf_spec <- rand_forest(mtry = tune(), trees = 1000, min_n = tune()) %>%
set_engine("ranger") %>%
set_mode("regression")
# Creación de la grilla de valores para los hiperparámetros
grid_values <- grid_regular(mtry(range = c(1, 10)), min_n(range = c(2, 20)), levels = 5)
# Preparación de las recetas
rec_full3 <- recipe(full_formula3, data = train_full_dummys) %>%
step_novel(all_nominal_predictors()) %>%
step_dummy(all_nominal_predictors()) %>%
step_zv(all_predictors()) %>%
step_normalize(all_predictors())
#Creamos las variables al cuadrado
test_full_dummys$surface_covered3_cuadrado <- test_full_dummys$surface_covered3^2
train_full_dummys$surface_covered3_cuadrado <- train_full_dummys$surface_covered3^2
test_full_dummys$rooms3_cuadrado <- test_full_dummys$rooms3^2
train_full_dummys$rooms3_cuadrado <- train_full_dummys$rooms3^2
test_full_dummys$surface_total3_cuadrado <- test_full_dummys$surface_total3^2
train_full_dummys$surface_total3_cuadrado <- train_full_dummys$surface_total3^2
#precio normal con mas variables
full_formula3<- as.formula(price ~ rooms3 + bathrooms3 + surface_total3 +
surface_covered3 + n_pisos_numerico + zona_t_g + estrato +
PC1 + PC2 + PC3 + PC4 + PC5 + PC6 +
PC7 + PC8 + PC9 + PC10 + PC11 + PC12 + PC13 + PC14 + PC15 +
PC16 + PC17 + PC18 + PC19 + PC20 + PC21 + PC22 + PC23 + PC24 +
PC25 + PC26 + PC27 + PC28 + PC29 + PC30 + PC31 + PC32 + PC33 +
PC34 + PC35 + PC36 + PC37 + PC38 + PC39 + PC40 + PC41 + PC42 +
PC43 + PC44 + PC45 + PC46 + PC47 + PC48 + PC49 + PC50 + PC51 +
PC52 + PC53 + PC54 + PC55 + PC56 + PC57 + PC58 + PC59 + PC60 +
PC61 + PC62 + PC63 + PC64 + PC65 + PC66 + PC67 + PC68 + PC69 +
PC70 + PC71 + abiert + acab + acces + alcob + ampli + are +
ascensor + balcon + ban + bao + baos + bbq + bogot + buen +
centr + cerc + cerr + chimene + closet + cocin + comedor +
comercial + comunal + cuart + cuatr + cubiert + cuent + deposit +
dos + edifici + espaci + estudi + excelent + exterior + garaj +
gas + gimnasi + habit + habitacion + hermos + ilumin + independient +
integral + interior + lavanderi + lind + mader + mts + natural +
parqu + parqueader + pis + principal + priv + remodel + rop +
sal + salon + sector + segur + servici + social + terraz +
tres + ubicacion + uno + vias + vigil + visit + vist + zon +
localidad_BARRIOS.UNIDOS + localidad_CANDELARIA + localidad_CHAPINERO +
localidad_ENGATIVA + localidad_LOS.MARTIRES + localidad_SAN.CRISTOBAL + localidad_SANTA.FE +
localidad_SUBA + localidad_TEUSAQUILLO + localidad_USAQUEN + surface_covered3^2 + rooms3^2 +
surface_total3^2 + property_type_Apartamento + property_type_Casa)
#precio normal con mas variables
full_formula3<- as.formula(price ~ rooms3 + bathrooms3 + surface_total3 +
surface_covered3 + n_pisos_numerico + zona_t_g + estrato +
PC1 + PC2 + PC3 + PC4 + PC5 + PC6 +
PC7 + PC8 + PC9 + PC10 + PC11 + PC12 + PC13 + PC14 + PC15 +
PC16 + PC17 + PC18 + PC19 + PC20 + PC21 + PC22 + PC23 + PC24 +
PC25 + PC26 + PC27 + PC28 + PC29 + PC30 + PC31 + PC32 + PC33 +
PC34 + PC35 + PC36 + PC37 + PC38 + PC39 + PC40 + PC41 + PC42 +
PC43 + PC44 + PC45 + PC46 + PC47 + PC48 + PC49 + PC50 + PC51 +
PC52 + PC53 + PC54 + PC55 + PC56 + PC57 + PC58 + PC59 + PC60 +
PC61 + PC62 + PC63 + PC64 + PC65 + PC66 + PC67 + PC68 + PC69 +
PC70 + PC71 + abiert + acab + acces + alcob + ampli + are +
ascensor + balcon + ban + bao + baos + bbq + bogot + buen +
centr + cerc + cerr + chimene + closet + cocin + comedor +
comercial + comunal + cuart + cuatr + cubiert + cuent + deposit +
dos + edifici + espaci + estudi + excelent + exterior + garaj +
gas + gimnasi + habit + habitacion + hermos + ilumin + independient +
integral + interior + lavanderi + lind + mader + mts + natural +
parqu + parqueader + pis + principal + priv + remodel + rop +
sal + salon + sector + segur + servici + social + terraz +
tres + ubicacion + uno + vias + vigil + visit + vist + zon +
localidad_BARRIOS.UNIDOS + localidad_CANDELARIA + localidad_CHAPINERO +
localidad_ENGATIVA + localidad_LOS.MARTIRES + localidad_SAN.CRISTOBAL + localidad_SANTA.FE +
localidad_SUBA + localidad_TEUSAQUILLO + localidad_USAQUEN + surface_covered3_cuadrado + rooms3_cuadrado +
surface_total3_cuadrado + property_type_Apartamento + property_type_Casa)
# Especificación del Modelo de Random Forest con el modo establecido
rf_spec <- rand_forest(mtry = tune(), trees = 1000, min_n = tune()) %>%
set_engine("ranger") %>%
set_mode("regression")
# Creación de la grilla de valores para los hiperparámetros
grid_values <- grid_regular(mtry(range = c(1, 10)), min_n(range = c(2, 20)), levels = 5)
# Preparación de las recetas
rec_full3 <- recipe(full_formula3, data = train_full_dummys) %>%
step_novel(all_nominal_predictors()) %>%
step_dummy(all_nominal_predictors()) %>%
step_zv(all_predictors()) %>%
step_normalize(all_predictors())
workflow_full3 <- workflow() %>%
add_recipe(rec_full3) %>%
add_model(rf_spec)
# Conversión de datos espaciales y validación cruzada espacial
train_sf <- st_as_sf(
train_full_dummys,
coords = c("lon", "lat"),
crs = 4326
)
set.seed(86936)
block_folds <- spatial_block_cv(train_sf, v = 5)
autoplot(block_folds)
# Ajuste del modelo con validación cruzada y selección del mejor modelo
set.seed(86936)
tune_full3 <- tune_grid(
workflow_full3,
resamples = block_folds,
grid = grid_values,
metrics = metric_set(mae)
)
View(workflow_full3)
??tune_grid
library(yardstick)
# Ajuste del modelo con validación cruzada y selección del mejor modelo
set.seed(86936)
tune_full3 <- tune_grid(
workflow_full3,
resamples = block_folds,
grid = grid_values,
metrics = metric_set(mae)
)
# Ajuste del modelo con validación cruzada y selección del mejor modelo
set.seed(86936)
tune_full3 <- tune_grid(
workflow_full3,
resamples = block_folds,
grid = grid_values,
yardstick::metrics = metric_set(mae)
# Ajuste del modelo con validación cruzada y selección del mejor modelo
set.seed(86936)
tune_full3 <- tune_grid(
workflow_full3,
resamples = block_folds,
grid = grid_values,
metrics = yardstick::metric_set(mae)
)
# Ajuste del modelo con validación cruzada y selección del mejor modelo
detach("package:Metrics", unload=TRUE)
set.seed(86936)
tune_full3 <- tune_grid(
workflow_full3,
resamples = block_folds,
grid = grid_values,
metrics = metric_set(mae)
)
best_tune_full3 <- select_best(tune_full3, metric = "mae")
# Finalizar el flujo de trabajo con el mejor valor de parámetros
full_final3 <- finalize_workflow(workflow_full3, best_tune_full3)
full_final_fit3 <- fit(full_final3, data = train_full_dummys)
# Predicción y evaluación del modelo 4 en el conjunto de entrenamiento
augment(full_final_fit3, new_data = train_full_dummys) %>%
mae(truth = price, estimate = .pred) # mae = 48923390
# Predicción en el conjunto de prueba (modelo 4)
predicted3 <- augment(full_final_fit3, new_data = test_full_dummys)
model4_rf_predictions <- predicted3[,c("property_id",".pred")]
colnames(model4_rf_predictions) <- c("property_id","price")
write.csv(model4_rf_predictions, "model4_rf_predictions_ale.csv", row.names = F)
summary(XGBoost_model8)
# Obtener los mejores hiperparámetros
best_hyperparameters <- XGBoost_model8$bestTune
print(best_hyperparameters)
# Resumen del modelo
summary(XGBoost_model8)
# Extraer el modelo xgboost entrenado
xgb_model <- XGBoost_model8$finalModel
# Gráfica de Importancia de las Características
importance_matrix <- xgb.importance(feature_names = xgb_model$feature_names, model = xgb_model)
xgb.plot.importance(importance_matrix, top_n = 20, measure = "Gain") +
ggtitle("Importancia de las características en el modelo XGBoost") +
theme_minimal()
# Calcular las predicciones en el conjunto de entrenamiento
train_full_dummys <- train_full_dummys %>%
mutate(price_pred = predict(XGBoost_model8, newdata = train_full_dummys))
# Gráfica de Dispersión de Predicciones vs Valores Reales
ggplot(train_full_dummys, aes(x = price, y = price_pred)) +
geom_point(alpha = 0.5) +
geom_abline(slope = 1, intercept = 0, color = "red") +
ggtitle("Predicciones vs Valores Reales") +
xlab("Valores Reales") +
ylab("Predicciones") +
theme_minimal()
# Obtener los resultados del entrenamiento
eval_log <- data.frame(xgb_model$evaluation_log)
# Graficar las Curvas de Aprendizaje
ggplot(eval_log, aes(x = iter)) +
geom_line(aes(y = train_rmse, color = "Entrenamiento")) +
geom_line(aes(y = test_rmse, color = "Validación")) +
ggtitle("Curvas de Aprendizaje: RMSE a lo largo de las rondas de boosting") +
xlab("Número de rondas de boosting") +
ylab("RMSE") +
scale_color_manual(name = "Datos", values = c("Entrenamiento" = "blue", "Validación" = "green")) +
theme_minimal()
# Revisar los nombres de las columnas
names(eval_log)
# Ajustar el código de la gráfica según los nombres de las columnas
ggplot(eval_log, aes(x = iter)) +
geom_line(aes(y = train_rmse, color = "Entrenamiento")) +
geom_line(aes(y = test_rmse, color = "Validación")) +
ggtitle("Curvas de Aprendizaje: RMSE a lo largo de las rondas de boosting") +
xlab("Número de rondas de boosting") +
ylab("RMSE") +
scale_color_manual(name = "Datos", values = c("Entrenamiento" = "blue", "Validación" = "green")) +
theme_minimal()
# Obtener los resultados de la validación cruzada
cv_results <- XGBoost_model8$resample
# Graficar el rendimiento en validación cruzada (MAE para cada fold)
ggplot(cv_results, aes(x = Resample, y = MAE)) +
geom_boxplot() +
geom_jitter(width = 0.2, alpha = 0.5) +
ggtitle("MAE en cada fold de validación cruzada") +
xlab("Fold de Validación") +
ylab("MAE") +
theme_minimal()
# Graficar el rendimiento en validación cruzada (MAE para cada fold) con líneas de color azul claro
ggplot(cv_results, aes(x = Resample, y = MAE)) +
geom_boxplot(color = "lightblue", fill = "lightblue", alpha = 0.5) +
geom_jitter(width = 0.2, alpha = 0.5, color = "lightblue") +
ggtitle("MAE en cada fold de validación cruzada") +
xlab("Fold de Validación") +
ylab("MAE") +
theme_minimal()
# Graficar el rendimiento en validación cruzada (MAE para cada fold) con líneas de color azul claro
ggplot(cv_results, aes(x = Resample, y = MAE)) +
geom_boxplot(color = "lightblue", fill = "lightblue", alpha = 0.5) +
geom_jitter(width = 0.2, alpha = 0.5) +
ggtitle("MAE en cada fold de validación cruzada") +
xlab("Fold de Validación") +
ylab("MAE") +
theme_minimal()
# Graficar el rendimiento en validación cruzada (MAE para cada fold) con líneas de color azul claro
ggplot(cv_results, aes(x = Resample, y = MAE)) +
geom_boxplot(color = "cadetblue3", fill = "cadetblue3", alpha = 0.5) +
geom_jitter(width = 0.2, alpha = 0.5) +
ggtitle("MAE en cada fold de validación cruzada") +
xlab("Fold de Validación") +
ylab("MAE") +
theme_minimal()
# Extraer el modelo xgboost entrenado
xgb_model <- XGBoost_model8$finalModel
# Calcular las predicciones en el conjunto de entrenamiento
train_full_dummys <- train_full_dummys %>%
mutate(price_pred = predict(XGBoost_model8, newdata = train_full_dummys))
# Gráfica de Dispersión de Predicciones vs Valores Reales
ggplot(train_full_dummys, aes(x = price, y = price_pred)) +
geom_point(alpha = 0.5) +
geom_abline(slope = 1, intercept = 0, color = "red") +
ggtitle("Predicciones vs Valores Reales") +
xlab("Valores Reales") +
ylab("Predicciones") +
theme_minimal()
# Obtener los resultados del entrenamiento
eval_log <- data.frame(xgb_model$evaluation_log)
# Revisar los nombres de las columnas
names(eval_log)
# Ajustar el código de la gráfica según los nombres de las columnas
ggplot(eval_log, aes(x = iter)) +
geom_line(aes(y = train_rmse, color = "Entrenamiento")) +
geom_line(aes(y = test_rmse, color = "Validación")) +
ggtitle("Curvas de Aprendizaje: RMSE a lo largo de las rondas de boosting") +
xlab("Número de rondas de boosting") +
ylab("RMSE") +
scale_color_manual(name = "Datos", values = c("Entrenamiento" = "blue", "Validación" = "green")) +
theme_minimal()
# Obtener los resultados de la validación cruzada
cv_results <- XGBoost_model8$resample
# Graficar el rendimiento en validación cruzada (MAE para cada fold) con líneas de color azul claro
ggplot(cv_results, aes(x = Resample, y = MAE)) +
geom_boxplot(color = "cadetblue3", fill = "cadetblue3", alpha = 0.5) +
geom_jitter(width = 0.2, alpha = 0.5) +
ggtitle("MAE en cada fold de validación cruzada") +
xlab("Fold de Validación") +
ylab("MAE") +
theme_minimal()
# Convertir los datos a un objeto sf (simple features)
train_sf <- st_as_sf(train_full_dummys, coords = c("lon", "lat"), crs = 4326)
# Crear bloques espaciales para validación cruzada
set.seed(86936)
block_folds <- spatialBlock(speciesData = train_sf,
theRange = 5000,  # Tamaño del bloque (ajustar según tus datos)
k = 5,  # Número de pliegues
selection = "random",
iteration = 100,  # Número de iteraciones
biomod2Format = TRUE,
xOffset = 0, yOffset = 0)
library(blockCV)
#- 1 | Carga de librerias y base de datos ----------------------------------------------------
require("pacman")
p_load("tidyverse",
"glmnet",
"rio", # read datasets
"tm", # para Text Mining
"tidytext",#Para tokenización
"caret",
"smotefamily",
"dplyr",
"stopwords", # consultar stopwords
"tidymodels",
"sf",
"spatialsample",
"blockCV",
"dummy",
"rpart", # Recursive Partition and Regression Trees (To run Trees)
"rpart.plot", ## for trees graphs
"Metrics", # Evaluation Metrics for ML
"MLeval",#*MLeval: Machine Learning Model Evaluation
"ipred", # For Bagging
"pROC",
"DiagrammeR",
"xgboost",
"ROSE",#remuestreo ROSE
"ranger") #random forest
# Convertir los datos a un objeto sf (simple features)
train_sf <- st_as_sf(train_full_dummys, coords = c("lon", "lat"), crs = 4326)
# Crear bloques espaciales para validación cruzada
set.seed(86936)
block_folds <- spatialBlock(speciesData = train_sf,
theRange = 5000,  # Tamaño del bloque (ajustar según tus datos)
k = 5,  # Número de pliegues
selection = "random",
iteration = 100,  # Número de iteraciones
biomod2Format = TRUE,
xOffset = 0, yOffset = 0)
# Crear un data frame para ggplot
block_data <- data.frame(train_sf, fold = factor(block_folds$foldID))
# Visualizar los bloques
ggplot(block_data) +
geom_sf(aes(color = fold), size = 1) +
theme_minimal() +
labs(title = "Validación cruzada espacial", x = "Longitud", y = "Latitud", color = "Fold")
p_load("tidyverse",
"glmnet",
"rio", # read datasets
"tm", # para Text Mining
"tidytext",#Para tokenización
"caret",
"smotefamily",
"dplyr",
"stopwords", # consultar stopwords
"tidymodels",
"sf",
"spatialsample",
"blockCV",
"terra",
"dummy",
"rpart", # Recursive Partition and Regression Trees (To run Trees)
"rpart.plot", ## for trees graphs
"Metrics", # Evaluation Metrics for ML
"MLeval",#*MLeval: Machine Learning Model Evaluation
"ipred", # For Bagging
"pROC",
"DiagrammeR",
"xgboost",
"ROSE",#remuestreo ROSE
"ranger") #random forest
# Convertir los datos a un objeto sf (simple features)
train_sf <- st_as_sf(train_full_dummys, coords = c("lon", "lat"), crs = 4326)
# Crear bloques espaciales para validación cruzada
set.seed(86936)
block_folds <- spatialBlock(speciesData = train_sf,
theRange = 5000,  # Tamaño del bloque (ajustar según tus datos)
k = 5,  # Número de pliegues
selection = "random",
iteration = 100,  # Número de iteraciones
biomod2Format = TRUE,
xOffset = 0, yOffset = 0)
# Crear un data frame para ggplot
block_data <- data.frame(train_sf, fold = factor(block_folds$foldID))
# Visualizar los bloques
ggplot(block_data) +
geom_sf(aes(color = fold), size = 1) +
theme_minimal() +
labs(title = "Validación cruzada espacial", x = "Longitud", y = "Latitud", color = "Fold")
# Extraer el modelo xgboost entrenado
xgb_model <- XGBoost_model8$finalModel
# Calcular las predicciones en el conjunto de entrenamiento
train_full_dummys <- train_full_dummys %>%
mutate(price_pred = predict(XGBoost_model8, newdata = train_full_dummys))
# Gráfica de Dispersión de Predicciones vs Valores Reales
ggplot(train_full_dummys, aes(x = price, y = price_pred)) +
geom_point(alpha = 0.5) +
geom_abline(slope = 1, intercept = 0, color = "red") +
ggtitle("Predicciones vs Valores Reales") +
xlab("Valores Reales") +
ylab("Predicciones") +
theme_minimal()
# Obtener los resultados de la validación cruzada
cv_results <- XGBoost_model8$resample
# Graficar el rendimiento en validación cruzada (MAE para cada fold) con líneas de color azul claro
ggplot(cv_results, aes(x = Resample, y = MAE)) +
geom_boxplot(color = "cadetblue3", fill = "cadetblue3", alpha = 0.5) +
geom_jitter(width = 0.2, alpha = 0.5) +
ggtitle("MAE en cada fold de validación cruzada") +
xlab("Fold de Validación") +
ylab("MAE") +
theme_minimal()
# Convertir los datos a un objeto sf (simple features)
train_sf <- st_as_sf(train_full_dummys, coords = c("lon", "lat"), crs = 4326)
# Crear bloques espaciales para validación cruzada
set.seed(86936)
block_folds <- cv_spatial(train_sf,
column = "geometry",
size = 5000,  # Tamaño del bloque en unidades de distancia
k = 5)  # Número de pliegues
# Verificar el contenido de block_folds
str(block_folds)
# Crear un data frame para ggplot
block_data <- data.frame(train_sf, fold = factor(block_folds$foldID))
# Verificar el contenido de block_data
str(block_data)
# Visualizar los bloques
ggplot(block_data) +
geom_sf(aes(color = fold), size = 1) +
theme_minimal() +
labs(title = "Validación cruzada espacial", x = "Longitud", y = "Latitud", color = "Fold")
set.seed(86936)
block_folds <- spatial_block_cv(train_sf, v = 5)
autoplot(block_folds)
# Seleccionar los mejores hiperparámetros
best_hyperparameters_rf <- select_best(tune_full3, metric = "mae")
print(best_hyperparameters_rf)
